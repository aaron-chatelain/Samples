        private static IEnumerable<AnnouncementModel> GetFilteredAnnouncementForUserUsingFilter2(IEnumerable<AnnouncementViewEntity> announcements,
        int userID, List<int> docCatID, int noOfAnnouncement, List<string> postedDate, bool thumbnailVisibility)
        {
            IEnumerable<AnnouncementModel> FilteredAnnouncement = null;
            LingMetaData metaData = new LingMetaData();

            FilteredAnnouncement = (from ann in announcements
                                    where (docCatID.Contains(ann.DocumentCategoryID ?? 0) && (ann.Posted.Date >= DateTime.Parse(postedDate[0]) && ann.Posted.Date <= DateTime.Parse(postedDate[1])))
                                    select new AnnouncementModel
                                    {
                                        AnnouncementTypeID = ann.AnnouncementTypeID,
                                        DocumentCategoryID = ann.DocumentCategoryID,
                                        Label = ann.Posted.ToString("MM.dd.yyyy") + " - " + ann.Title,
                                        EndTimeZoneInfo = ann.EndTimeZoneInfo,
                                        StartTimeZoneInfo = ann.StartTimeZoneInfo,
                                        AnnouncementAccessed = ann.AnnouncementAccessed,
                                        CoverImageURL = AnnouncementManager.GenerateCoverImageURLFromCoverImageID(ann.CoverImageID),
                                        AnnouncementIcon = AnnouncementManager.IconForAlert(ann.AnnouncementTypeID, ann.Filename),
                                        AnnouncementPostedDate = ann.Posted.ToString("MMM yyyy"),
                                        ThumbnailVisibility = thumbnailVisibility ? "inline-block" : "none",
                                        Highlight = AnnouncementManager.HighLightAnnouncement(ann.Id) //update this to column highlight
                                    }).Distinct();

            FilteredAnnouncement = FilteredAnnouncement.Select(annModel =>
            {
                annModel.AnnouncementDetails = GetAnnouncementDetails(annModel.AnnouncementId).ToList();

                int vehicleIDInt = annModel.vehicleID ?? 0;

                if (vehicleIDInt != 0)
                {
                    IFS.Platform.Managers.VehicleManager vehicleManager = new IFS.Platform.Managers.VehicleManager();
                    VehicleEntity vehicleEntity = vehicleManager.GetVehicle(vehicleIDInt);
                    annModel.VehicleGuid = vehicleEntity.VehicleGuid;
                    annModel.VehicleDisclaimerAcceptRequired = vehicleManager.IsDisclaimerAcceptRequiredForVehicle(userID, vehicleIDInt);
                }
                return annModel;
            });

            return FilteredAnnouncement;
        }
